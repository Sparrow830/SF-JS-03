// Сверстайте 5 параграфов с текстом. С помощью JS меняйте цвет фона каждого параграфа на случайный каждую секунду.
// Создайте массив с названиями цветов ['blue', 'cyan', ...] и с помощью функции из предыдущего задания выбирайте случайный цвет из массива.
// 
// Исходный код:
// 
// const random = (min, max) => {
//   const rand = min + Math.random() * (max + 1 - min);
//   return Math.floor(rand);
// };


// Параграфы с текстом создали в отдельном HTML-файле (task_10.2.html), подгрузили туда данный JS-файл.
const random = (min, max) => Math.floor(Math.random() * (max + 1 - min) + min);
// Создаём функцию "random", которая возвращает нам случайное значение из заданного диапазона (между "min" и "max").
// Эта формула подробно описана в файле с предыдущим заданием (task_10.1.js).
const colors = ['red', 'green', 'blue', 'yellow', 'cyan', 'purple'];
// Создаём массив "colors" с названиями цветов.
const getRandomColor = () => colors[random(0, colors.length - 1)];
// Создаём функцию "getRandomColor", которая возвращает нам случайный элемент массива "colors" через функцию "random",
// в которую мы передаём 0 как аргумент для "min" и "colors.length - 1" как аргумент для "max".
// Нумерация элементов массива начинается с 0, поэтому, если в массиве 6 цветов, то нумерация будет "0, 1, 2, 3, 4, 5". Отсюда - "min = 0".
// В большинстве случаев количество ячеек и количество элементов совпадает, хотя бывает, что ячеек больше, чем записанных в них значений.
// В данном случае colors.length равно 6, но поскольку нумерация элементов массива начинается с 0, то последний элемент будет иметь номер 5.
// Отсюда - "max = colors.length - 1" (то есть "max = 6 - 1 = 5").
const paragraphs = document.querySelectorAll('p');
// Создаём переменную "paragraphs", которая примет в себя результат выполнения последующего действия.
// Объект "document" включает в себя содержимое веб-страницы (всё DOM-дерево), а также обеспечивает функциональность,
// которая является глобальной для документа (например, создание новых элементов).
// Из него можно получить доступ к любому узлу (HTML-элементу).
// Метод .querySelectorAll() определён для объекта "document" и любого HTML-элемента.
// Принимает строку с названием селектора (то есть название селектора должно быть в кавычках).
// В качестве селектора может выступать тег, класс и id. Находит все дочерние элементы, соответствующие селектору и возвращает их массив.
// В данном случае это все параграфы (<p>) внутри всего документа. Таким образом, переменная "pargraphs" будет массивом найденных параграфов.
// Можно также искать элементы, вложенные в другие элементы - например, <p>, вложенные в <div>: document.querySelectorAll('div>p')
setInterval(() => {
// Функция setInterval() принимает функцию-колбэк либо некий код, заключённый в скобки (),
// интервал повтора выполнения данного кода (в данном случае - 1000) и необязательные аргументы, которые передаются в колбэк (здесь их нет).
  paragraphs.forEach(x => x.style.backgroundColor = getRandomColor())
// Методом перебора .forEach для массива "paragraphs" мы подставляем каждый элемент массива в "x" и через свойство .style задаём ему стиль CSS.
// В данном случае мы изменяем стиль "background-color", который в JS записывается через camelCase, то есть как "backgroundColor".
// Целиком запись выглядит как "x.style.backgroundColor". К ней мы применяем цвет из функции "getRandomColor()"...
}, 1000);
// и меняем его каждую секунду.


// const random = (min, max) => {
//   const rand = min + Math.random() * (max + 1 - min);
//   return Math.floor(rand);
// };
// 
// const colors = ['red', 'green', 'blue', 'yellow', 'cyan', 'purple'];
// 
// const getRandomColor = () => {
//   return colors[random(0, colors.length - 1)]
// };
// 
// const paragraphs = document.querySelectorAll('p');
// 
// setInterval(() => {
//   paragraphs.forEach(p => {
//     p.style.backgroundColor = getRandomColor();
//   })
// }, 1000);