// Напишите игру: в центре экрана появляется кнопка «Нажми меня».
// Когда юзер наводит на неё курсор, она сразу же перемещается на случайные координаты.
// 
// Исходный код:
// 
// const random = (min, max) => {
//   const rand = min + Math.random() * (max + 1 - min);
//   return Math.floor(rand);
// };


// Разметку HTML создали в отдельном HTML-файле (task_11.3.html), подгрузили туда данный JS-файл. Также подгрузили туда CSS (task_11.3.css).
const random = (min, max) => Math.floor(Math.random() * (max + 1 - min) + min);
// Создаём функцию "random", которая возвращает нам случайное значение из заданного диапазона (между "min" и "max").
// Эта формула подробно описана в файле с предыдущим заданием (task_10.1.js).

const button = document.querySelector('button');
// Создаём переменную "button", которая примет в себя результат выполнения последующего действия.
// Метод .querySelector() определён для объекта "document" и любого HTML-элемента.
// Принимает строку с названием селектора (то есть название селектора должно быть в кавычках).
// В качестве селектора может выступать тег, класс и id. Находит первый дочерний элемент, соответствующий селектору и возвращает его.
// В данном случае это первый найденный внутри всего документа элемент <button>.
// Можно также искать элементы, вложенные в другие элементы - например, <button>, вложенные в <div>: document.querySelector('div>button')
button.addEventListener('mouseenter', () => {
// Метод .addEventListener() добавляет элементу действие, которое будет выполнено после срабатывания события.
// Например, на клик мышки или нажатие клавиши.
// Принимает строку, содержащую название события (в данном случае - 'mouseenter', то есть наведение курсора мыши),
// функцию, которая будет вызвана, когда событие произойдёт, а также необязательный параметр "options" или "capture",
// который описывает дополнительные свойства для срабатывания события (здесь его нет).
  button.style.left = `${random(10, 90)}%`;
  button.style.top = `${random(5, 95)}%`;
// Свойство .style получает и устанавливает инлайновые стили элемента, то есть те, что записываются через HTML-атрибут "style".
// Поскольку специфичность этого свойства такая же, как у атрибута "style",
// то есть выше, чем у всех остальных атрибутов (за исключением !important), уже существующие атрибуты замещаются.
// Имена атрибутов записываются в "camelCase", в отличие от CSS, где используется дефис.
// В данном случае замещаются атрибуты "left" и "top".
// В качестве значений используются шаблонные строки с результатами выполнения функции "random".
})


// HTML:
// 
// <div class="field">
//   <button type="button">
//     Нажми меня!
//   </button>
// </div>
// 
// 
// CSS:
// 
// body {
//   width: 100vw;
//   height: 100vh;
//   padding: 0;
//   margin: 0;
// }
// 
// .field {
//   box-sizing: border-box;
//   margin: 10px;
//   border: 1px solid blue;
//   height: calc(100% - 20px);
// }
// 
// button {
//   padding: 10px 20px;
//   position: absolute;
//   width: 120px;
//   left: 50%;
//   top: 50%;
//   transform: translate(-50%, -50%);
//   transition: all 0.2s ease;
// }
// 
// 
// JS:
// 
// const random = (min, max) => {
//   const rand = min + Math.random() * (max + 1 - min);
//   return Math.floor(rand);
// };

// const button = document.querySelector('button');
// button.addEventListener('mouseenter', () => {
//   button.style.left = `${random(10, 90)}%`;
//   button.style.top = `${random(5, 95)}%`;
// })