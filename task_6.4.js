// Напишите функцию, которая принимает массив чисел и сначала к каждому чётному числу прибавляет 4, у каждого нечётного отнимает 2,
// потом убирает из массива числа, делящиеся на 13 без остатка и возвращает сумму оставшихся чисел.
// 
// В качестве проверки: calculate([15, 2, 3, 5, 6]) должна вернуть 20.


function calculate(arr) {
  return arr
    .map(x => x % 2 === 0 ? x + 4 : x - 2)
// Метод .map() трансформирует один массив (в данном случае "arr" с аргументом [4, 8, 15, 16, 23, 42]) в другой при помощи функции-колбэка.
// В данном случае используется анонимная стрелочная функция с параметром "x".
// Метод .map() перебирает массив, подставляя каждое его значение в "x" и возвращая результат выполнения функции.
// В данном случае результат зависит от условного (тернарного) оператора "(условие (true/false)) ? (выполняется при true) : (выполняется при false)"
// В данном случае условие это "x % 2 === 0". Если true, выполняется "x + 4". Если false, выполняется "x - 2".
    .filter(x => x % 13 !== 0)
// Метод .filter() при помощи функции-колбэка перебирает массив, подставляя каждое его значение в "x" и возвращая true/false.
// Значения, которые удовлетворяют условию (true), оставляются в массиве. Остальные значения (false) отбрасываются.
    .reduce((a, b) => a + b, 0)
// Метод .reduce() принимает 2 аргумента: функцию-колбэк (в данном случае "(a, b) => a + b") и аккумулятор (в данном случае 0).
// В самой функции может быть до 4-х параметров (acc, item, index, arr). В данном случае их 2 (a, b).
// Первый параметр - аккумулятор, который можно указать явно (в данном случае 0).
// Если не указывать, отсчёт пойдёт с первого переданного значения, а перебор со второго.
// В данном случае начальным значением будет 8, поскольку первый элемент массива - 4 и к нему по результатам предыдущих операций добавится ещё 4.
// Метод .reduceRight работает аналогично, но проходит по массиву справа налево.
}

console.log(calculate([4, 8, 15, 16, 23, 42]));


// const calculate = (arr) => {
//   return arr
//     .map(v => v % 2 === 0 ? v + 4 : v - 2)
//     .filter(v => !(v % 13 === 0))
//     .reduce((a, b) => a + b, 0)
// }
// 
// alert(calculate([15, 2, 3, 5, 6]))