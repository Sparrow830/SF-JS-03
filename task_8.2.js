// Переменная, объявленная с помощью var, всплывает и видна на уровне функции, даже если объявлена внутри цикла for.
// Перепишите программу так, чтобы она печатала от 1 до 10 в консоль. Используйте замыкания.
// 
// Исходный код:
// 
// for (var i = 0; i < 10; ++i) {
//   setTimeout(() => console.log(i), 0);
// }
// 
// Если не вносить изменения в исходный код, то в консоль выводится "10".
// Можно всё сделать гораздо проще:
// 
// for (var i = 1; i <= 10; ++i) {
//   console.log(i);
// }
// 
// Искомый результат достигнут - в консоль выводятся числа от 1 до 10. Но нарушено условие задачи - не использованы замыкания.
// И пришлось удалить из кода "setTimeout()". В данном случае он не несёт никакой смысловой нагрузки, но если бы нёс?


// Если использовать код как есть, то в консоль будут выводиться числа не от 1 до 10, а от 0 до 9,
// поэтому вместо "for (var i = 0; i < 10; ++i)" пишем:
for (var i = 1; i <= 10; ++i) {
// Запускаем цикл "for", для него инициализируем переменную "i", которая является счётчиком, и присваиваем ей начальное значение "1".
// Объявляем условие выполнения цикла (цикл будет выполняться, пока i <= 10), и выражение, меняющее шаг цикла (i = i + 1 или ++i).
  (function(i) {
// Инициализируем IIFE без переменной, поскольку здесь не нужно сохранять результат выполнения функции в переменную, но зато с параметром "i".
// Поскольку "var i" создаёт переменную "i" в глобальной области видимости, к моменту выполнения исходного кода (без IIFE), "i" уже равно "10".
// Поэтому с помощью IIFE мы создаём для каждого шага цикла отдельную локальную область видимости переменной "i".
// Именно для функции задавать параметр "i" не обязательно, можно любой другой - например, "x", но тогда придётся ниже записать "console.log(x)".
// А вот ещё ниже, в операторе вызова "()", аргумент "i" уже обязателен.
    setTimeout(() => console.log(i), 0);
// Функция setTimeout() принимает функцию-колбэк либо некий код (в данном случае - () => console.log(i)),
// время задержки в милисекундах (в данном случае - 0) и необязательные аргументы, которые передаются в колбэк (здесь их нет).
// Если нет аргументов, то непонятно, зачем нужна функция-колбэк, когда можно просто написать "setTimeout(console.log(i), 0);".
// Также непонятно, зачем вообще здесь нужен setTimeout(), если он не несёт никакой практической нагрузки.
// Можно записать просто как "console.log(i);", но оставим код максимально приближённым к изначальному.
  })(i)
// Здесь мы вызываем функцию IIFE с помощью оператора вызова "()" и внутри этого оператора передаём в функцию аргумент "i".
}


// for (var i = 0; i < 10; ++i) {
//   ((i) => {
//     setTimeout(() => console.log(i), 0);
//   })(i)
// }